
##### 문제1] 교수 테이블 이용 - 정교수를 전임교수로 변경
~~~sql
select * from professor --정교수 몇명인지 확인
where position = '정교수';

update professor set position = '전임교수' where position = '정교수';
select * from professor where position = '전임교수';
~~~

##### 문제2] pay 300이하인 사람들의 급여에 5% 인상하기
~~~sql
select * from professor where pay <=300;
update professor set pay = pay * 1.05 where pay <= 300;
~~~

##### 문제3] home page 없는 교수들 출력해서 null 표시 삭제하기
~~~sql
--where hpage = null(X)
--where hpage is null;(null인 것들만 보여줌), where hpage is not null; (null 아닌것들만 보여줌)
select * from professor where hpage = null; --(X)
select * from professor where hpage is null; --(O)
select * from professor where hpage is not null; -- (O)
update professor set hpage = ' ' where hpage is null;

select * from professor where hpage is null or hpage = ' ';
select * from professor
~~~

##### 문제4] bonus에서 null 처리 되어 있는 분들 0으로 표시하기
~~~sql
desc professor; --변수 유형 출력
select * from professor where bonus is null;
update professor set bonus = '0' where bonus is null;
update professor set bonus = nv1(bonus, 0) where bonus is null;
update professor set bonus = nv1(bonus, 10) where bonus is null;
~~~

##### 문제5] emp2 테이블 이용 - 취미가 술인 사람들을 찾아서 음주가무로 변경하기
~~~sql
select * from emp2 where hobby = '술';
update emp2 set hobby = '음주가무' where hobby = '술';
select * from emp2 where hobby = '음주가무';
~~~

##### 문제6] 이씨 성 가진 모든 사람들 중에 계약직인 사람들을 인턴직으로 승진!
~~~sql
select * from emp2 where name like '이%' and emp_type = '계약직';
update emp2 set emp_type = '인턴직' where name like '이%' and emp_type = '계약직';
select * from emp2 where name like '이%';
~~~

##### 문제7] 이름이 나한라 를 너한나로 변경
~~~sql
select name from emp2;
update emp2 set name = '너한나' where name = '나한라';
~~~

##### 문제8] 취미가 등산인 사람을 찾아서 수영으로 변경
~~~sql
select hobby from emp2;
update emp2 set hobby = '수영' where hobby = '등산';
~~~

##### 문제9] 계약직 직원 찾아서 삭제 하기

##### 문제10] pay(or bonus)가 50 이상인 사람만 출력


### 레코드 삭제
~~~sql
select * from emp2;
delete emp2; -- 전체 레코드 삭제
rollback; -- 실행했던 명령을 취소 >> 어떠한 위치까지 지정해서 실행취소하는 문법도 존재.
          -- DML명령어에서만 적용됨 (select, insert, update, delete)
commit;
-- 실행했던 명령을 완료 >> 데이터베이스 실제본에서 코드를 돌려도 임시 데이터베이스로만 들어가고 commit을 하면 바로 저장 완료(백업)
-- commit 실행 후 rollback(X), 복구 안됨.

select * from emp2 where hobby = '음악감상';
delete emp2 where hobby = '음악감상'; --조건에 맞는 레코드 삭제

truncate table emp2; -- 테이블 레코드 전체 삭제 (구조물은 살아있다.)
drop table emp2;-- 테이블 구조까지 전체 삭제
~~~

### 연산자

~~~sql
select mod(7,4) from dual; --나머지 구하기

select * from student where grade = 1 or grade = 2 or grade = 3;
select * from student where grade between 1 and 3; -- 앞에 값이 항상 뒤에값 보다 작아야 한다.
select * from student where grade in(1, 2, 3) -- between보다 in()쓰기를 권장한다.
~~~
* 문제1] 몸무게가 40~60 사이 친구들 출력
```sql
select * from student where weight between 40 and 60;
```

pk : primary key

fk : forein key..?

union pk, fk 아닌 경우 합칠때

### 집합(그룹)함수
~~~sql
select sum(weight) as "몸무게합", avg(weight) "몸무게 평균"from student;

select * from professor;
select count(*) from professor; -- null을 포함한 레코드 수 반환
select count(bonus) from professor; -- null을 뺀 레코드 수 반화
select max(pay) from professor; -- 최댓값 반환
select min(pay) from professor; -- 최소값 반환

select max(pay), avg(pay), sum(pay), count(pay) from professor;
-- 그룹(집합) 함수는 일반 필드와 같이 쓸 수 없다.
select name, max(pay), avg(pay), sum(pay), count(pay) from professor;
--일반필드는 사용자가 만든 필드
-- 따라서 일반 필드를 그룹바이저를 사용하여 그룹화 시켜야 한다.
select name, max(pay), avg(pay), sum(pay), count(pay)
from professor
group by name;

select name, email, avg(pay), sum(pay), count(pay)
from professor
group by name, email;
~~~

* 문제1] 학생테이블 이용해서 학년별로 몸무게 함, 키 합을 구하세요.
~~~sql
select * from student;
select grade "학년", sum(weight)"몸무게 합", sum(height) "키 합"
from student
group by grade;
~~~
